import torch
import numpy as np
import warnings
import pickle
import os
from models import BearingClassifier
warnings.filterwarnings('ignore')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
def set_seeds():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    torch.manual_seed(42)
    np.random.seed(42)

def print_summary(accuracy, state, state_value, mean_prediction):
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ"""
    print(f"\n=== –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω ===")
    print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy:.4f}")
    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞: {state} ({state_value}%)")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–Ω–æ—Å–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞: {100 - mean_prediction:.2f}%")

def print_model_summary(model, input_size, train_losses, test_losses, test_accuracies, 
                       accuracy, predictions, labels, mean_prediction, state, state_value):
    """–í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–∞–º–∞—Ä–∏ –ø–æ –º–æ–¥–µ–ª–∏"""
    print("\n" + "="*80)
    print("üìä –ü–û–î–†–û–ë–ù–´–ô –°–ê–ú–ê–†–ò –ü–û –ú–û–î–ï–õ–ò –ê–ù–ê–õ–ò–ó–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–î–®–ò–ü–ù–ò–ö–ê")
    print("="*80)
    
    # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏
    print("\nüèóÔ∏è  –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ú–û–î–ï–õ–ò:")
    print(f"   ‚Ä¢ –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: {input_size} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–ø–æ—Å–ª–µ PCA)")
    print(f"   ‚Ä¢ –°–∫—Ä—ã—Ç—ã–µ —Å–ª–æ–∏: 256 ‚Üí 128 ‚Üí 64 ‚Üí 32 –Ω–µ–π—Ä–æ–Ω–æ–≤")
    print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏–∏: ReLU + BatchNorm + Dropout")
    print(f"   ‚Ä¢ –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: 1 –Ω–µ–π—Ä–æ–Ω —Å Sigmoid")
    print(f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {sum(p.numel() for p in model.parameters()):,}")
    
    # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±—É—á–µ–Ω–∏—è
    device = next(model.parameters()).device
    print(f"\n‚ö° –£–°–¢–†–û–ô–°–¢–í–û –û–ë–£–ß–ï–ù–ò–Ø:")
    print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    if device.type == 'mps':
        print(f"   ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: MPS (Metal Performance Shaders)")
    elif device.type == 'cuda':
        print(f"   ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: CUDA")
    else:
        print(f"   ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: CPU")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
    print(f"\nüìà –ú–ï–¢–†–ò–ö–ò –û–ë–£–ß–ï–ù–ò–Ø:")
    print(f"   ‚Ä¢ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.4f} ({accuracy*100:.2f}%)")
    print(f"   ‚Ä¢ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—É—á–∞—é—â–∞—è –ø–æ—Ç–µ—Ä—è: {train_losses[-1]:.4f}")
    print(f"   ‚Ä¢ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ—Ç–µ—Ä—è: {test_losses[-1]:.4f}")
    print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {max(test_accuracies):.4f} ({max(test_accuracies)*100:.2f}%)")
    print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ—Ç–µ—Ä—è: {min(test_losses):.4f}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    predictions_array = np.array(predictions)
    labels_array = np.array(labels)
    
    print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô:")
    print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {len(predictions)}")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {predictions_array.mean():.2f}%")
    print(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {predictions_array.std():.2f}%")
    print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {predictions_array.min():.2f}%")
    print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {predictions_array.max():.2f}%")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ –∫–ª–∞—Å—Å–∞–º
    bad_count = np.sum(predictions_array == 0.0)
    normal_count = np.sum(predictions_array == 50.0)
    good_count = np.sum(predictions_array == 100.0)
    
    print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô:")
    print(f"   ‚Ä¢ –ü–ª–æ—Ö–∏–µ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏ (0%): {bad_count} ({bad_count/len(predictions)*100:.1f}%)")
    print(f"   ‚Ä¢ –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏ (50%): {normal_count} ({normal_count/len(predictions)*100:.1f}%)")
    print(f"   ‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏ (100%): {good_count} ({good_count/len(predictions)*100:.1f}%)")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞
    print(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢ –î–õ–Ø –¢–ï–°–¢–û–í–û–ì–û –ü–û–î–®–ò–ü–ù–ò–ö–ê:")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {mean_prediction:.2f}%")
    print(f"   ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–Ω–æ—Å–∞: {100 - mean_prediction:.2f}%")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if mean_prediction < 25:
        print(f"   ‚Ä¢ ‚ö†Ô∏è  –ü–û–î–®–ò–ü–ù–ò–ö –¢–†–ï–ë–£–ï–¢ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ô –ó–ê–ú–ï–ù–´!")
        print(f"   ‚Ä¢ –ò–∑–Ω–æ—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {100 - mean_prediction:.1f}%")
        print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
    elif mean_prediction < 75:
        print(f"   ‚Ä¢ ‚ö° –ü–û–î–®–ò–ü–ù–ò–ö –í –ù–û–†–ú–ê–õ–¨–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò")
        print(f"   ‚Ä¢ –ò–∑–Ω–æ—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {100 - mean_prediction:.1f}%")
        print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    else:
        print(f"   ‚Ä¢ ‚úÖ –ü–û–î–®–ò–ü–ù–ò–ö –í –û–¢–õ–ò–ß–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò")
        print(f"   ‚Ä¢ –ò–∑–Ω–æ—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {100 - mean_prediction:.1f}%")
        print(f"   ‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
    print(f"\nüèÜ –ö–ê–ß–ï–°–¢–í–û –ú–û–î–ï–õ–ò:")
    if accuracy >= 0.95:
        print(f"   ‚Ä¢ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (‚â•95%)")
    elif accuracy >= 0.90:
        print(f"   ‚Ä¢ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (90-95%)")
    elif accuracy >= 0.80:
        print(f"   ‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (80-90%)")
    else:
        print(f"   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è (<80%)")
    
    print("\n" + "="*80) 

def load_saved_model(model_dir="saved_models"):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if torch.backends.mps.is_available():
            device = torch.device('mps')
        elif torch.cuda.is_available():
            device = torch.device('cuda')
        else:
            device = torch.device('cpu')
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        model_path = os.path.join(model_dir, "bearing_classifier.pth")
        checkpoint = torch.load(model_path, map_location=device)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
        input_size = checkpoint['input_size']
        model = BearingClassifier(input_size)
        model.load_state_dict(checkpoint['model_state_dict'])
        model = model.to(device)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        model.eval()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ scaler
        scaler_path = os.path.join(model_dir, "scaler.pkl")
        with open(scaler_path, 'rb') as f:
            scaler = pickle.load(f)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ PCA
        pca_path = os.path.join(model_dir, "pca.pkl")
        with open(pca_path, 'rb') as f:
            pca = pickle.load(f)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata_path = os.path.join(model_dir, "model_metadata.pkl")
        with open(metadata_path, 'rb') as f:
            metadata = pickle.load(f)
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {model_dir}")
        print(f"   ‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {metadata['model_architecture']}")
        print(f"   ‚Ä¢ –í—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä: {input_size}")
        print(f"   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {metadata['description']}")
        print(f"   ‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        
        return model, scaler, pca, metadata
        
    except FileNotFoundError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {model_dir}")
        print(f"   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ save_model_and_preprocessors()")
        return None, None, None, None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")
        return None, None, None, None 